from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils import timezone

# ---------- User & Roles (unchanged) ----------
class User(AbstractUser):
    ROLE_CHOICES = [
        ('admin', 'Admin'),
        ('cashier', 'Cashier'),
        ('kitchen', 'Kitchen'),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='cashier')

    def __str__(self):
        return f"{self.username} ({self.get_role_display()})"


# ---------- Categories & Menu ----------
class Category(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name_plural = "Categories"

    def __str__(self):
        return self.name


class MenuItem(models.Model):
    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='items')
    name = models.CharField(max_length=150)
    description = models.TextField(blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    food_panda_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    is_available = models.BooleanField(default=True)
    image = models.ImageField(upload_to='menu_items/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} – {self.category.name}"


# ---------- Deals (New) ----------
class Deal(models.Model):
    """
    A Deal bundles multiple MenuItems (with quantities).
    The price is set at creation time and overrides individual item sum.
    """
    name = models.CharField(max_length=150, unique=True)
    description = models.TextField(blank=True)
    price = models.DecimalField(max_digits=10, decimal_places=2,
                                help_text="Total price for this deal")
    food_panda_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    is_available = models.BooleanField(default=True)
    image = models.ImageField(upload_to='deals/', blank=True, null=True)
    items = models.ManyToManyField(
        MenuItem,
        through='DealItem',
        related_name='deals'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} (Deal)"


class DealItem(models.Model):
    """
    The intermediate table linking a Deal to its MenuItems (with quantity).
    """
    deal = models.ForeignKey(Deal, on_delete=models.CASCADE, related_name='deal_items')
    menu_item = models.ForeignKey(MenuItem, on_delete=models.PROTECT)
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return f"{self.quantity} x {self.menu_item.name} in {self.deal.name}"


# ---------- Tables & Orders ----------
class Table(models.Model):
    number = models.PositiveIntegerField(unique=True)
    seats = models.PositiveIntegerField(default=4)
    is_occupied = models.BooleanField(default=False)

    def __str__(self):
        return f"Table {self.number} ({self.seats} seats)"


class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),       
        ('in_kitchen', 'In Kitchen'),
        ('served', 'Served'),
        ('paid', 'Paid'),
        ('food_panda', 'Food Panda'),  
    ]

    # Order number is autogenerated on save
    number = models.CharField(max_length=20, unique=True, blank=True)
    table = models.ForeignKey(Table, on_delete=models.PROTECT,
                              related_name='orders', null=True, blank=True)
    created_by = models.ForeignKey(User, on_delete=models.PROTECT,
                                   related_name='orders')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    discount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    tax_percentage = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    service_charge = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    created_at = models.DateTimeField(auto_now_add=True)

    # Token number resets each day at 12:00 PM
    token_number = models.PositiveIntegerField(default=0, blank=True, null=True)

    source = models.CharField(max_length=20, choices=[('food_panda', 'Food Panda')], null=True, blank=True)

    def __str__(self):
        return f"Order #{self.number} – {self.get_status_display()}"

    def save(self, *args, **kwargs):
        # Auto-generate order.number if blank (e.g., ORD20250531-0001)
        if not self.number:
            today = timezone.localdate()
            prefix = today.strftime("ORD%Y%m%d")
            existing_today = Order.objects.filter(number__startswith=prefix).count() + 1
            self.number = f"{prefix}-{existing_today:04d}"

            # Determine token number: resets at 12:00 PM
            now = timezone.localtime()
            if now.hour < 12:
                # Count yesterday’s tokens
                yesterday = today - timezone.timedelta(days=1)
                last_token = Order.objects.filter(
                    created_at__date=yesterday,
                    token_number__isnull=False
                ).order_by('-token_number').first()
                self.token_number = (last_token.token_number if last_token else 0) + 1
            else:
                # Count today’s tokens
                last_token = Order.objects.filter(
                    created_at__date=today,
                    token_number__isnull=False
                ).order_by('-token_number').first()
                self.token_number = (last_token.token_number if last_token else 0) + 1

        super().save(*args, **kwargs)


class OrderItem(models.Model):
    """
    Can point to either a MenuItem or a Deal—but never both:
    - If `menu_item` is set → a single MenuItem
    - If `deal` is set → a Deal bundle
    """
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    menu_item = models.ForeignKey(MenuItem, on_delete=models.PROTECT, null=True, blank=True)
    deal = models.ForeignKey(Deal, on_delete=models.PROTECT, null=True, blank=True)
    quantity = models.PositiveIntegerField(default=1)
    unit_price = models.DecimalField(max_digits=10, decimal_places=2)
    token_printed = models.BooleanField(default=False)
    printed_quantity = models.PositiveIntegerField(default=0)

    def line_total(self):
        return self.quantity * self.unit_price

    def __str__(self):
        if self.deal:
            return f"{self.quantity} x {self.deal.name} (Deal)"
        return f"{self.quantity} x {self.menu_item.name}"


# ---------- Payments & Billing ----------
class Payment(models.Model):
    PAYMENT_METHODS = [
        ('cash', 'Cash'),
        ('card', 'Card'),
    ]
    order = models.OneToOneField(Order, on_delete=models.CASCADE, related_name='payment')
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    method = models.CharField(max_length=10, choices=PAYMENT_METHODS)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Payment for Order #{self.order.number} – {self.get_method_display()}"


# ---------- Inventory (unchanged) ----------
class Ingredient(models.Model):
    name = models.CharField(max_length=100, unique=True)
    unit = models.CharField(max_length=50, help_text="E.g. kg, liter, pcs")
    current_stock = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    reorder_level = models.DecimalField(max_digits=10, decimal_places=2, default=0)

    def __str__(self):
        return self.name


class InventoryTransaction(models.Model):
    TRANSACTION_TYPES = [
        ('in', 'Stock In'),
        ('out', 'Stock Out'),
    ]
    ingredient = models.ForeignKey(Ingredient, on_delete=models.CASCADE, related_name='transactions')
    transaction_type = models.CharField(max_length=3, choices=TRANSACTION_TYPES)
    quantity = models.DecimalField(max_digits=10, decimal_places=2)
    timestamp = models.DateTimeField(auto_now_add=True)
    notes = models.TextField(blank=True)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # Update stock
        if self.transaction_type == 'in':
            self.ingredient.current_stock += self.quantity
        else:
            self.ingredient.current_stock -= self.quantity
        self.ingredient.save()

    def __str__(self):
        return f"{self.get_transaction_type_display()} – {self.ingredient.name}: {self.quantity} {self.ingredient.unit}"


# ---------- Settings & Configuration (unchanged) ----------
class TaxRate(models.Model):
    name = models.CharField(max_length=100)
    rate = models.DecimalField(max_digits=5, decimal_places=2, help_text="e.g. 7.50 for 7.5%")
    active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.name} ({self.rate}%)"


class DiscountRule(models.Model):
    name = models.CharField(max_length=100)
    amount = models.DecimalField(max_digits=10, decimal_places=2,
                                 help_text="Fixed amount or % based on is_percentage")
    is_percentage = models.BooleanField(default=False)
    active = models.BooleanField(default=True)

    def __str__(self):
        disc = f"{self.amount}%" if self.is_percentage else f"{self.amount}"
        return f"{self.name} ({disc})"


class POSSettings(models.Model):
    restaurant_name = models.CharField(max_length=200)
    logo = models.ImageField(upload_to='settings/', blank=True, null=True)
    theme_color = models.CharField(max_length=7, default='#ff5722',
                                   help_text="Hex color code (e.g. #ff5722)")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.restaurant_name


class PrintStatus(models.Model):
    token = models.BooleanField(default=False)
    bill  = models.BooleanField(default=False)

    def __str__(self):
        return f"PrintStatus(token={self.token}, bill={self.bill})"